#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <iostream>
#include <utility>
#include <algorithm>
#include <vector>
#include <list>
#include <stack>
#include <queue>
#include <unordered_map>
#include <map>
#include <set>
#include <tuple>
#include <cassert>
using namespace std;
using ll = long long;
const int mod = 1e9 + 7;

template <typename T>
struct UnionFind
{
    map<T, T> parent;

    UnionFind(vector<T> source)
    {
        int size = source.size();
        for (int i = 0; i < size; i++)
            parent[source[i]] = source[i];
    }

    T root(T x)
    {
        if (parent[x] == x)
            return x;
        return parent[x] = root(parent[x]);
    }

    void unite(T x, T y)
    {
        T rx = root(x);
        T ry = root(y);
        if (rx == ry)
            return;
        parent[rx] = ry;
    }

    bool is_same(T x, T y)
    {
        T rx = root(x);
        T ry = root(y);
        return rx == ry;
    }
};

int main()
{
    ll H, W;
    ll CH, CW;
    ll DH, DW;
    scanf("%lld", &H);
    scanf("%lld", &W);
    scanf("%lld", &CH);
    scanf("%lld", &CW);
    scanf("%lld", &DH);
    scanf("%lld", &DW);
    CH--;
    CW--;
    DH--;
    DW--;

    vector<vector<bool>> mazemap(H, vector<bool>(W));
    vector<pair<ll, ll>> pathvec;
    ll pathcolumn = 0;
    char c;
    scanf("%c", &c);
    for (ll i = 0; i < H; i++)
    {
        char c;
        for (ll j = 0; j < W; j++)
        {
            scanf("%c", &c);
            mazemap[i][j] = (c == '.');
            if (mazemap[i][j])
            {
                pathcolumn++;
                pathvec.push_back({i, j});
            }
        }
        scanf("%c", &c);
    }

    struct UnionFind<pair<ll, ll>> uf(pathvec);
    for (auto &&item : pathvec)
    {
        ll u = item.first - 1;
        ll r = item.second - 1;
        bool isUParent = u > 0 && mazemap[u][item.second];
        bool isRParent = r > 0 && mazemap[item.first][r];
        if (isUParent)
            uf.parent[item] = {u, item.second};
        if (isRParent)
            uf.parent[item] = {item.first, r};
        if (isUParent && isRParent)
            uf.unite({u, item.second}, {item.first, r});
    }

    set<pair<ll, ll>> roots;
    for (auto &&item : pathvec)
        roots.insert(uf.root(item));

    map<pair<ll, ll>, set<pair<ll, ll>>> jumppath;
    ll groupCount = roots.size();
    for (ll k = 0; k < groupCount; k++)
    {
        for (auto &&item : pathvec)
            for (ll l = -2; l < 3; l++)
            {
                for (ll m = -2; m < 3; m++)
                {
                    pair<ll, ll> currentpos = {item.first + l, item.second + m};
                    if (currentpos.first < 0 || currentpos.second < 0 || currentpos.first >= H || currentpos.second >= W)
                        continue;

                    if (!mazemap[currentpos.first][currentpos.second])
                        continue;

                    if (!uf.is_same(currentpos, item))
                    {
                        jumppath[uf.root(currentpos)].insert(uf.root(item));
                        jumppath[uf.root(item)].insert(uf.root(currentpos));
                    }
                }
            }
    }

    ll ans = 127;
    if (!mazemap[CH][CW])
    {
        ans = -1;
        printf("%lld\n", ans);
        return 0;
    }

    auto rc = uf.root({CW, CH});
    auto rd = uf.root({DW, DH});

    printf("(%lld, %lld)\n", CW, CH);
    printf("(%lld, %lld)\n", DW, DH);
    printf("(%lld, %lld)\n", rc.first, rc.second);
    printf("(%lld, %lld)\n", rd.first, rd.second);
    printf("%lld\n", (ll)mazemap[CH][CW]);
    for (ll i = 0; i < H; i++)
    {
        for (ll j = 0; j < W; j++)
        {
            if (mazemap[i][j])
                printf(".");
            else
                printf("#");
        }
        printf("\n");
    }

    if (rc == rd)
    {
        ans = 0;
        printf("%lld\n", ans);
        return 0;
    }

    queue<tuple<ll, ll, ll>> nexts;
    nexts.push({0, rc.first, rc.second});
    while (!nexts.empty())
    {
        auto current = nexts.front();
        nexts.pop();
        for (auto &&item : jumppath[{
                 get<1>(current),
                 get<2>(current)}])
        {
            if (item == rd)
            {
                ans = get<0>(current) + 1;
                printf("%lld\n", ans);
                return 0;
            }

            nexts.push(make_tuple(get<0>(current) + 1, item.first, item.second));
        }
    }
    ans = -1;
    printf("%lld\n", ans);
}
